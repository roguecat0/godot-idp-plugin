extends Node

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	var kb: KnowlegdeBase = IDP.create_empty_kb()
	var Yolo := kb.add_type("Yolo",["1..4"],IDP.INT)
	print(kb.types["Yolo"].to_vocabulary_line())
	var hello := kb.add_function("hello",[Yolo,"Int"],Yolo,{[2,2]:3,[1,1]:4})
	kb.functions.hello.add([4,4],2)
	print(hello.to_vocabulary_line())
	print(hello.to_structure_line())
	var _rip := kb.add_function("rip",Yolo,Yolo,{2:3,1:4})
	print(kb.functions["rip"].to_vocabulary_line())
	print(kb.structure.functions["rip"].to_structure_line())
	var yo = kb.add_predicate("yo",Yolo)
	print(yo.to_vocabulary_line())
	yo.add(2)
	yo.add(4)
	print(yo.to_structure_line())
	var con = kb.add_constant("con","Int")
	print(con.to_vocabulary_line())
	print(con.to_structure_line())
	con.set_val(2)
	print(con.to_vocabulary_line())
	print(con.to_structure_line())
	var bo = kb.add_proposition("bo",true)
	print(bo.to_vocabulary_line())
	print(bo.to_structure_line())
	bo.unset_val()
	print(bo.to_vocabulary_line())
	print(bo.to_structure_line())
	
	var _kb_str = kb.parse_to_idp()
	
	var kb2: KnowlegdeBase = IDP.create_empty_kb()
	var T := kb2.add_type("T",["1..3"],IDP.INT)
	var _pred = kb2.add_predicate("pred",[T,T])
	var _pred2 = kb2.add_predicate("pred2",T)
	var _fun := kb2.add_function("fun",T,T)
	var _fun2:= kb2.add_function("fun2",[T,T],T)
	kb2.theory.add_line("pred(1,1).")
	kb2.theory.add_line("pred2(1).")
	var _con2 = kb2.add_constant("con2",T)
	#kb2.theory.add_line("~pred(1,1).")
	IDP.model_expand(kb2)
	kb2.view_solutions()
