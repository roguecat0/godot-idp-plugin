vocabulary V {
	type Orders := {0, 1, 2, 3, 4}
	maxIron : () -> Int
	maxWood : () -> Int
	numDeliveries : () -> Int
	deliveries : (Orders) -> Bool
	ironOrder : (Orders) -> Int
	woodOrder : (Orders) -> Int
}
theory T:V {
	numDeliveries() = #{o in Orders: deliveries(o)}.
	maxIron() >= sum{{ ironOrder(o) | o in Orders: deliveries(o)}}.
	maxWood() >= sum{{ woodOrder(o) | o in Orders: deliveries(o)}}.
}
structure S:V {
	maxIron := 5.
	maxWood := 5.
	ironOrder := {0 -> 4, 1 -> 1, 2 -> 1, 3 -> 3, 4 -> 2}.
	woodOrder := {0 -> 2, 1 -> 1, 2 -> 4, 3 -> 3, 4 -> 1}.
}
procedure main() {
	pretty_print(maximize(T,S,term="numDeliveries()"))
}