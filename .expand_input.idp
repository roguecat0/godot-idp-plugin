vocabulary V {
	type Row := {0..2}// type
	type Col := {0..2}// type
	type Value := {0..1} // type
	cellValue: (Row * Col) -> Value // function
	initialValue: (Row * Col * Value) -> Bool
	horizontalEdge: (Row * Col * Row * Col) -> Bool
	verticalEdge: (Row * Col * Row * Col) -> Bool
}
theory T:V {

	{
		!r1,r2 in Row: !c1,c2 in Col: horizontalEdge(r1,c1,r2,c2) <- (r1 = r2 & c1 = c2+1 ).
		!r1,r2 in Row: !c1,c2 in Col: verticalEdge(r1,c1,r2,c2) <- (r1 = r2+1 & c1 = c2 ).
	}

	!r in Row, c in Col, v in Value: initialValue(r, c, v) => cellValue(r, c) = v.
	!r1,r2,r3 in Row: !c1,c2,c3 in Col: horizontalEdge(r1,c1,r2,c2) & horizontalEdge(r2,c2,r3,c3) => (cellValue(r1,c1)~=cellValue(r2,c2) | cellValue(r2,c2)~=cellValue(r3,c3)).
	!r1,r2,r3 in Row: !c1,c2,c3 in Col: verticalEdge(r1,c1,r2,c2) & verticalEdge(r2,c2,r3,c3) => (cellValue(r1,c1)~=cellValue(r2,c2) | cellValue(r2,c2)~=cellValue(r3,c3)).
}
structure S:V {
	initialValue := {(1, 0, 1), (1, 1, 0), (1, 2, 0)}.
}
procedure main() {
	pretty_print(model_expand(T,S,max=1))
}
