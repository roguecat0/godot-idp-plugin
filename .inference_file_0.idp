vocabulary V {
	type Q := {-2, -1, 0, 1, 2}
	type R := {-2, -1, 0, 1, 2}
	type Tile := {hills, forest, mountains, fields, pasture, desert, none}
	type Token := {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
	type Pips := {0, 1, 2, 3, 4, 5}
	tile_type : (Q * R) -> Tile
	tile_token : (Q * R) -> Token
	relevant : (Q * R) -> Bool
	neighbour : (Q * R * Q * R) -> Bool
	token_pips : (Token) -> Pips

}
theory T:V {
	?q in Q, r in R: tile_token(q, r) = 7 <=> tile_type(q, r) = desert.
	#{ q in Q, r in R: tile_type(q, r) = hills } = 3.
	#{ q in Q, r in R: tile_type(q, r) = forest } = 4.
	#{ q in Q, r in R: tile_type(q, r) = mountains } = 3.
	#{ q in Q, r in R: tile_type(q, r) = fields } = 4.
	#{ q in Q, r in R: tile_type(q, r) = pasture } = 4.
	#{ q in Q, r in R: tile_type(q, r) = desert } = 1.
	#{ q in Q, r in R: tile_token(q, r) = 2 } = 1.
	#{ q in Q, r in R: tile_token(q, r) = 3 } = 2.
	#{ q in Q, r in R: tile_token(q, r) = 4 } = 2.
	#{ q in Q, r in R: tile_token(q, r) = 5 } = 2.
	#{ q in Q, r in R: tile_token(q, r) = 6 } = 2.
	#{ q in Q, r in R: tile_token(q, r) = 7 } = 1.
	#{ q in Q, r in R: tile_token(q, r) = 8 } = 2.
	#{ q in Q, r in R: tile_token(q, r) = 9 } = 2.
	#{ q in Q, r in R: tile_token(q, r) = 10 } = 2.
	#{ q in Q, r in R: tile_token(q, r) = 11 } = 2.
	#{ q in Q, r in R: tile_token(q, r) = 12 } = 1.
	!q in Q, r in R: ~relevant(q, r) <=> tile_type(q, r) = none.
	!q in Q, r in R: ~relevant(q, r) <=> tile_token(q, r) = 1.
	tile_type(0, 0) = desert.
 !q1, q2 in Q, r1, r2 in R: neighbour(q1, r1, q2, r2) <=> ~(q1 = q2 & r1 = r2) & -1 =< (q1 - q2) =< 1 & -1 =< (r1 - r2) =< 1 & relevant(q1, r1) & relevant(q2, r2).
}
structure S:V {
	relevant := {(-2, 0), (-2, 1), (-2, 2), (-1, -1), (-1, 0), (-1, 1), (-1, 2), (0, -2), (0, -1), (0, 0), (0, 1), (0, 2), (1, -2), (1, -1), (1, 0), (1, 1), (2, -2), (2, -1), (2, 0)}.
	token_pips := {1 -> 0, 2 -> 1, 3 -> 2, 4 -> 3, 5 -> 4, 6 -> 5, 7 -> 0, 8 -> 5, 9 -> 4, 10 -> 3, 11 -> 2, 12 -> 1}.

}
procedure main() {
	pretty_print(model_expand(T,S,max=1))
}
