extends Node

func _ready() -> void:
	var kb : KnowlegdeBase= IDP.create_empty_kb()
	var t1 = kb.add_type("t1",[2,3],IDP.INT)
	var Floats = kb.add_type("Floats",[1.5,3.5,6.8],IDP.REAL)
	var p1: = kb.add_predicate("p1",IDP.INT)
	var f1: = kb.add_function("f1",[IDP.BOOL,IDP.REAL],IDP.INT)
	var f2: = kb.add_function("f2",[IDP.BOOL,IDP.INT],"Int")
	var f3: = kb.add_function("f2",[t1],"Int")
	var c1: = kb.add_constant("c1",t1)
	var pp1: = kb.add_proposition("pp1")
	var term1 = p1.to_term([2])
	var term2 = f1.to_term([true,3.0])
	var term3 = IDP._p_not(term2._neq(term2))._defines(term1)
	var term4 = IDP._p_not(term1._defines(term1))
	var term5 = Integer.create(1)._lt(Real.create(3.5))._defines(Bool.create(true))
	var term6 = f2.to_term([false,7])
	var term7 = term1._equivalent(term4)
	var term8 = c1.to_term()
	var term9 = term2._sub(term6)
	var term10 = pp1.to_term()._and(term8._eq(term8))
	var d1 = kb.add_definition()
	var term11 = ForEach.create(["x","y"],t1,Integer.create("x")._eq("y"))._count()
	var term12 = ForEach.create("z",t1,Real.create("z")._neq(2))._max(f3.to_term(["z"]))
	var inner_each = ForEach.create("c",Floats,Integer.create("a")._add("b")._eq("c"))._any()
	var term13 = term6._between(1,1,IDP.GTE,IDP.GT)
	# mutli foreach
	var each1 = ForEach.create(["a","b"], "T",Bool.new_base("lol"))
	var each2 = ForEach.create([["a","b"],["c"]], [t1,"K"],Bool.new_base("lol"))
	each2.set_inner_expr(Bool.new_base(true))

	d1.add_term(term3)
	d1.add_term(term4)
	d1.add_term(term5)
	kb.add_term(term7)
	kb.add_term(term9)
	kb.add_term(term10) 
	kb.add_term(term11) 
	kb.add_term(term12) 
	kb.add_term(term13) 
	kb.add_term(each1) 
	kb.add_term(each2) 
	print(kb.parse_to_idp())
