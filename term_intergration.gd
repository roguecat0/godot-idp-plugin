extends Node

func _ready() -> void:
	var kb : KnowlegdeBase= IDP.create_empty_kb()
	var t1 = kb.add_type("t1",[2,3],IDP.INT)
	var Floats = kb.add_type("Floats",[1.5,3.5,6.8],IDP.REAL)
	var p1: = kb.add_predicate("p1",IDP.INT)
	var f1: = kb.add_function("f1",[IDP.BOOL,IDP.REAL],IDP.INT)
	var f2: = kb.add_function("f2",[IDP.BOOL,IDP.INT],"Int")
	var f3: = kb.add_function("f2",[t1],"Int")
	var c1: = kb.add_constant("c1",t1)
	var pp1: = kb.add_proposition("pp1")
	var term1 = p1.apply([2])
	var term2 = f1.apply([true,3.0])
	var term3 = IDP.p_not(term2.neq(term2)).defines(term1)
	var term4 = IDP.p_not(term1.defines(term1))
	var term5 = Integer.create(1).lt(Real.create(3.5)).defines(Bool.create(true))
	var term6 = f2.apply([false,7])
	var term7 = term1.equivalent(term4)
	var term8 = c1.apply()
	var term9 = term2.sub(term6)
	var term10 = pp1.apply().and_(term8.eq(term8))
	var d1 = kb.add_definition()
	var term11 = ForEach.create(["x","y"],t1,Integer.create("x").eq("y")).count()
	var term12 = ForEach.create("z",t1,Real.create("z").neq(2)).max(f3.apply(["z"]))
	var inner_each = ForEach.create("c",Floats,Integer.create("a").add("b").eq("c")).any()
	var term13 = term6.between(1,1,IDP.GTE,IDP.GT)
	# mutli foreach
	var each1 = ForEach.create(["a","b"], "T",Bool.base_("lol"))
	var each2 = ForEach.create([["a","b"],["c"]], [t1,"K"],Bool.base_("lol"))
	each2.set_inner_expr(Bool.base_(true))

	d1.add_formula(term3)
	d1.add_formula(term4)
	d1.add_formula(term5)
	kb.add_formula(term7)
	kb.add_formula(term9)
	kb.add_formula(term10) 
	kb.add_formula(term11) 
	kb.add_formula(term12) 
	kb.add_formula(term13) 
	kb.add_formula(each1) 
	kb.add_formula(each2) 
	print(kb.parse_to_idp())
